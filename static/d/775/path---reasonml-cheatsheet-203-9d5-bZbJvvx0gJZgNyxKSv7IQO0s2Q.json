{"data":{"site":{"siteMetadata":{"title":"Oleksandr Dubenko","author":"Oleksandr Dubenko","siteUrl":"https://blog.dubenko.dev"}},"mdx":{"excerpt":"Implementations are in  .re  files, interfaces are in  .rei  files. Comments are in  /* */ Integers: 10, 10_000, 0x12AF, 0o567, 0b11011101 Chars: 'a', '\\25â€¦","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ReasonML Cheatsheet\",\n  \"date\": \"2019-12-31T11:07:16.785Z\",\n  \"description\": \"yeye\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Implementations are in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".re\"), \" files, interfaces are in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".rei\"), \" files.\"), mdx(\"p\", null, \"Comments are in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"/* */\")), mdx(\"p\", null, \"Integers: 10, 10_000, 0x12AF, 0o567, 0b11011101\"), mdx(\"p\", null, \"Chars: \\u2018a\\u2019, \\u2018\\\\255\\u2019, \\u2018\\\\xFF\\u2019, \\u2018\\\\n\\u2019\"), mdx(\"p\", null, \"Floats: 0.1, -1.123e-12\"), mdx(\"h2\", null, \"Data Types\"), mdx(\"p\", null, \"unit - only has one value \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"()\"), \"\\nint - integer\\nfloat - double precision float\\nbool - boolean, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"true\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"false\"), \"\\nchar - single ASCII character\\nstring - strings of chars\\nlist(\\u2018a) - list of elements with type \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"'a\"), \" \", \"[1,2,3]\", \"\\narray(\\u2018a) - array of elements with type \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"'a\"), \" \", \"[|1,2,3|]\", \"\\n(\\u2018a,\\u2018b,\\u2018c, \\u2026) - tuples, like (1, \\u201Chi\\u201D, 2.3)\"), mdx(\"p\", null, \"Note: \\u2018a is a type parameter like T in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"List<T>\"), \" in other languages like C#, TypeScript\"), mdx(\"h2\", null, \"Constructed Types\"), mdx(\"h3\", null, \"Records\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"reason\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-reason\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"type\"), \" record \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"/* New record type */\"), \"\\n    field1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" bool\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"/* Immutable field */\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"mutable\"), \" field2\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" int\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"/* Mutable field */\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")))), mdx(\"h3\", null, \"Variants\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"reasonml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), \"type variant =           /* New variant type */\\n  | Constant             /* Constant constructor */\\n  | Param(string)        /* Constructor with argument */\\n  | Pair(string, int)    /* Constructor with arguments */\\n  | Gadt(int): variant   /* GADT constructor */\"))), mdx(\"h2\", null, \"Constructed Values\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"reasonml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), \"let r = { field1: true, field2: 10 }; /* Constructing a record */\\nlet r' = { ...r, field1: false }; /* Functional update */\\nr.field2 := 20; /* Assignment to a mutable field */\\nlet v = Constant;\\nlet v' = Param(\\\"hi\\\")\\nlet v'' = Pair(\\\"hi\\\", 10)\"))), mdx(\"h2\", null, \"References, Strings and Arrays\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"reasonml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reasonml\"\n  }), \"let x = ref(3); /* mutable integer reference */\\nx := 10;  /* reference assignation */\\nlet a = x^; /* reference access */\"))));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/reasonml-cheatsheet/"},"frontmatter":{"title":"ReasonML Cheatsheet","date":"December 31, 2019","description":"yeye","thumbnail":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reasonml-cheatsheet/","previous":{"fields":{"slug":"/confirm-dialog-react/"},"frontmatter":{"title":"Imperative confirm dialog in React"},"code":{"scope":""}},"next":null}}